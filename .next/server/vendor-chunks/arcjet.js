"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/arcjet";
exports.ids = ["vendor-chunks/arcjet"];
exports.modules = {

/***/ "(rsc)/./node_modules/arcjet/index.js":
/*!**************************************!*\
  !*** ./node_modules/arcjet/index.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArcjetAllowDecision: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetAllowDecision),\n/* harmony export */   ArcjetBotReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetBotReason),\n/* harmony export */   ArcjetChallengeDecision: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetChallengeDecision),\n/* harmony export */   ArcjetConclusion: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetConclusion),\n/* harmony export */   ArcjetDecision: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetDecision),\n/* harmony export */   ArcjetDenyDecision: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetDenyDecision),\n/* harmony export */   ArcjetEdgeRuleReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetEdgeRuleReason),\n/* harmony export */   ArcjetEmailReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetEmailReason),\n/* harmony export */   ArcjetEmailType: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetEmailType),\n/* harmony export */   ArcjetErrorDecision: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorDecision),\n/* harmony export */   ArcjetErrorReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorReason),\n/* harmony export */   ArcjetIpDetails: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetIpDetails),\n/* harmony export */   ArcjetMode: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetMode),\n/* harmony export */   ArcjetRateLimitAlgorithm: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRateLimitAlgorithm),\n/* harmony export */   ArcjetRateLimitReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRateLimitReason),\n/* harmony export */   ArcjetReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetReason),\n/* harmony export */   ArcjetRuleResult: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult),\n/* harmony export */   ArcjetRuleState: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleState),\n/* harmony export */   ArcjetRuleType: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleType),\n/* harmony export */   ArcjetSensitiveInfoReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetSensitiveInfoReason),\n/* harmony export */   ArcjetSensitiveInfoType: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetSensitiveInfoType),\n/* harmony export */   ArcjetShieldReason: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetShieldReason),\n/* harmony export */   ArcjetStack: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetStack),\n/* harmony export */   botCategories: () => (/* reexport safe */ _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.botCategories),\n/* harmony export */   \"default\": () => (/* binding */ arcjet),\n/* harmony export */   detectBot: () => (/* binding */ detectBot),\n/* harmony export */   fixedWindow: () => (/* binding */ fixedWindow),\n/* harmony export */   protectSignup: () => (/* binding */ protectSignup),\n/* harmony export */   sensitiveInfo: () => (/* binding */ sensitiveInfo),\n/* harmony export */   shield: () => (/* binding */ shield),\n/* harmony export */   slidingWindow: () => (/* binding */ slidingWindow),\n/* harmony export */   tokenBucket: () => (/* binding */ tokenBucket),\n/* harmony export */   validateEmail: () => (/* binding */ validateEmail)\n/* harmony export */ });\n/* harmony import */ var _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @arcjet/protocol */ \"(rsc)/./node_modules/@arcjet/protocol/index.js\");\n/* harmony import */ var _arcjet_protocol_convert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @arcjet/protocol/convert.js */ \"(rsc)/./node_modules/@arcjet/protocol/convert.js\");\n/* harmony import */ var _arcjet_analyze__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @arcjet/analyze */ \"(rsc)/./node_modules/@arcjet/analyze/index.js\");\n/* harmony import */ var _arcjet_duration__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcjet/duration */ \"(rsc)/./node_modules/@arcjet/duration/index.js\");\n/* harmony import */ var _arcjet_headers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @arcjet/headers */ \"(rsc)/./node_modules/@arcjet/headers/index.js\");\n/* harmony import */ var _arcjet_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @arcjet/runtime */ \"(rsc)/./node_modules/@arcjet/runtime/index.js\");\n/* harmony import */ var _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcjet/stable-hash */ \"(rsc)/./node_modules/@arcjet/stable-hash/index.js\");\n\n\n\n\n\n\n\n\n\nfunction assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nfunction nowInSeconds() {\n    return Math.floor(Date.now() / 1000);\n}\nclass Cache {\n    expires;\n    data;\n    constructor() {\n        this.expires = new Map();\n        this.data = new Map();\n    }\n    get(key) {\n        const ttl = this.ttl(key);\n        if (ttl > 0) {\n            return this.data.get(key);\n        }\n        else {\n            // Cleanup if expired\n            this.expires.delete(key);\n            this.data.delete(key);\n        }\n    }\n    set(key, value, expiresAt) {\n        this.expires.set(key, expiresAt);\n        this.data.set(key, value);\n    }\n    ttl(key) {\n        const now = nowInSeconds();\n        const expiresAt = this.expires.get(key) ?? now;\n        return expiresAt - now;\n    }\n}\nfunction errorMessage(err) {\n    if (err) {\n        if (typeof err === \"string\") {\n            return err;\n        }\n        if (typeof err === \"object\" &&\n            \"message\" in err &&\n            typeof err.message === \"string\") {\n            return err.message;\n        }\n    }\n    return \"Unknown problem\";\n}\nconst knownFields = [\n    \"ip\",\n    \"method\",\n    \"protocol\",\n    \"host\",\n    \"path\",\n    \"headers\",\n    \"body\",\n    \"email\",\n    \"cookies\",\n    \"query\",\n];\nfunction isUnknownRequestProperty(key) {\n    return !knownFields.includes(key);\n}\nfunction isEmailType(type) {\n    return (type === \"FREE\" ||\n        type === \"DISPOSABLE\" ||\n        type === \"NO_MX_RECORDS\" ||\n        type === \"NO_GRAVATAR\" ||\n        type === \"INVALID\");\n}\nclass Performance {\n    log;\n    constructor(logger) {\n        this.log = logger;\n    }\n    // TODO(#2020): We should no-op this if loglevel is not `debug` to do less work\n    measure(label) {\n        const start = performance.now();\n        return () => {\n            const end = performance.now();\n            const diff = end - start;\n            this.log.debug(\"LATENCY %s: %sms\", label, diff.toFixed(3));\n        };\n    }\n}\nfunction toString(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return `${value}`;\n    }\n    if (typeof value === \"boolean\") {\n        return value ? \"true\" : \"false\";\n    }\n    return \"<unsupported value>\";\n}\n// This is the Symbol that Vercel defines in their infrastructure to access the\n// Context (where available). The Context can contain the `waitUntil` function.\n// https://github.com/vercel/vercel/blob/930d7fb892dc26f240f2b950d963931c45e1e661/packages/functions/src/get-context.ts#L6\nconst SYMBOL_FOR_REQ_CONTEXT = Symbol.for(\"@vercel/request-context\");\nfunction lookupWaitUntil() {\n    const fromSymbol = globalThis;\n    if (typeof fromSymbol[SYMBOL_FOR_REQ_CONTEXT] === \"object\" &&\n        fromSymbol[SYMBOL_FOR_REQ_CONTEXT] !== null &&\n        \"get\" in fromSymbol[SYMBOL_FOR_REQ_CONTEXT] &&\n        typeof fromSymbol[SYMBOL_FOR_REQ_CONTEXT].get === \"function\") {\n        const vercelCtx = fromSymbol[SYMBOL_FOR_REQ_CONTEXT].get();\n        if (typeof vercelCtx === \"object\" &&\n            vercelCtx !== null &&\n            \"waitUntil\" in vercelCtx &&\n            typeof vercelCtx.waitUntil === \"function\") {\n            return vercelCtx.waitUntil;\n        }\n    }\n}\nfunction toAnalyzeRequest(request) {\n    const headers = {};\n    if (typeof request.headers !== \"undefined\") {\n        for (const [key, value] of request.headers.entries()) {\n            headers[key] = value;\n        }\n    }\n    return {\n        ...request,\n        headers,\n    };\n}\nfunction extraProps(details) {\n    const extra = new Map();\n    for (const [key, value] of Object.entries(details)) {\n        if (isUnknownRequestProperty(key)) {\n            extra.set(key, toString(value));\n        }\n    }\n    return Object.fromEntries(extra.entries());\n}\nfunction createTypeValidator(...types) {\n    return (key, value) => {\n        const typeOfValue = typeof value;\n        if (!types.includes(typeOfValue)) {\n            if (types.length === 1) {\n                throw new Error(`invalid type for \\`${key}\\` - expected ${types[0]}`);\n            }\n            else {\n                throw new Error(`invalid type for \\`${key}\\` - expected one of ${types.join(\", \")}`);\n            }\n        }\n        else {\n            return false;\n        }\n    };\n}\nfunction createValueValidator(\n// This uses types to ensure we have at least 2 values\n...values) {\n    return (key, value) => {\n        // We cast the values to unknown because the optionValue isn't known but\n        // we only want to use `values` on string enumerations\n        if (!values.includes(value)) {\n            throw new Error(`invalid value for \\`${key}\\` - expected one of ${values.map((value) => `'${value}'`).join(\", \")}`);\n        }\n    };\n}\nfunction createArrayValidator(validate) {\n    return (key, value) => {\n        if (Array.isArray(value)) {\n            for (const [idx, item] of value.entries()) {\n                validate(`${key}[${idx}]`, item);\n            }\n        }\n        else {\n            throw new Error(`invalid type for \\`${key}\\` - expected an array`);\n        }\n    };\n}\nfunction createValidator({ rule, validations, }) {\n    return (options) => {\n        for (const { key, validate, required } of validations) {\n            if (required && !Object.hasOwn(options, key)) {\n                throw new Error(`\\`${rule}\\` options error: \\`${key}\\` is required`);\n            }\n            const value = options[key];\n            // The `required` flag is checked above, so these should only be validated\n            // if the value is not undefined.\n            if (typeof value !== \"undefined\") {\n                try {\n                    validate(key, value);\n                }\n                catch (err) {\n                    throw new Error(`\\`${rule}\\` options error: ${errorMessage(err)}`);\n                }\n            }\n        }\n    };\n}\nconst validateString = createTypeValidator(\"string\");\nconst validateNumber = createTypeValidator(\"number\");\nconst validateBoolean = createTypeValidator(\"boolean\");\nconst validateFunction = createTypeValidator(\"function\");\nconst validateStringOrNumber = createTypeValidator(\"string\", \"number\");\nconst validateStringArray = createArrayValidator(validateString);\nconst validateMode = createValueValidator(\"LIVE\", \"DRY_RUN\");\nconst validateEmailTypes = createArrayValidator(createValueValidator(\"DISPOSABLE\", \"FREE\", \"NO_MX_RECORDS\", \"NO_GRAVATAR\", \"INVALID\"));\nconst validateTokenBucketOptions = createValidator({\n    rule: \"tokenBucket\",\n    validations: [\n        {\n            key: \"mode\",\n            required: false,\n            validate: validateMode,\n        },\n        {\n            key: \"characteristics\",\n            validate: validateStringArray,\n            required: false,\n        },\n        { key: \"refillRate\", required: true, validate: validateNumber },\n        { key: \"interval\", required: true, validate: validateStringOrNumber },\n        { key: \"capacity\", required: true, validate: validateNumber },\n    ],\n});\nconst validateFixedWindowOptions = createValidator({\n    rule: \"fixedWindow\",\n    validations: [\n        { key: \"mode\", required: false, validate: validateMode },\n        {\n            key: \"characteristics\",\n            validate: validateStringArray,\n            required: false,\n        },\n        { key: \"max\", required: true, validate: validateNumber },\n        { key: \"window\", required: true, validate: validateStringOrNumber },\n    ],\n});\nconst validateSlidingWindowOptions = createValidator({\n    rule: \"slidingWindow\",\n    validations: [\n        { key: \"mode\", required: false, validate: validateMode },\n        {\n            key: \"characteristics\",\n            validate: validateStringArray,\n            required: false,\n        },\n        { key: \"max\", required: true, validate: validateNumber },\n        { key: \"interval\", required: true, validate: validateStringOrNumber },\n    ],\n});\nconst validateSensitiveInfoOptions = createValidator({\n    rule: \"sensitiveInfo\",\n    validations: [\n        { key: \"mode\", required: false, validate: validateMode },\n        { key: \"allow\", required: false, validate: validateStringArray },\n        { key: \"deny\", required: false, validate: validateStringArray },\n        { key: \"contextWindowSize\", required: false, validate: validateNumber },\n        { key: \"detect\", required: false, validate: validateFunction },\n    ],\n});\nconst validateEmailOptions = createValidator({\n    rule: \"validateEmail\",\n    validations: [\n        { key: \"mode\", required: false, validate: validateMode },\n        { key: \"block\", required: false, validate: validateEmailTypes },\n        { key: \"allow\", required: false, validate: validateEmailTypes },\n        { key: \"deny\", required: false, validate: validateEmailTypes },\n        {\n            key: \"requireTopLevelDomain\",\n            required: false,\n            validate: validateBoolean,\n        },\n        { key: \"allowDomainLiteral\", required: false, validate: validateBoolean },\n    ],\n});\nconst validateBotOptions = createValidator({\n    rule: \"detectBot\",\n    validations: [\n        { key: \"mode\", required: false, validate: validateMode },\n        { key: \"allow\", required: false, validate: validateStringArray },\n        { key: \"deny\", required: false, validate: validateStringArray },\n    ],\n});\nconst validateShieldOptions = createValidator({\n    rule: \"shield\",\n    validations: [{ key: \"mode\", required: false, validate: validateMode }],\n});\nconst Priority = {\n    SensitiveInfo: 1,\n    Shield: 2,\n    RateLimit: 3,\n    BotDetection: 4,\n    EmailValidation: 5,\n};\nfunction isLocalRule(rule) {\n    return (\"validate\" in rule &&\n        typeof rule.validate === \"function\" &&\n        \"protect\" in rule &&\n        typeof rule.protect === \"function\");\n}\n/**\n * Arcjet token bucket rate limiting rule. Applying this rule sets a token\n * bucket rate limit.\n *\n * This algorithm is based on a bucket filled with a specific number of tokens.\n * Each request withdraws some amount of tokens from the bucket and the bucket\n * is refilled at a fixed rate. Once the bucket is empty, the client is blocked\n * until the bucket refills.\n *\n * This algorithm is useful when you want to allow clients to make a burst of\n * requests and then still be able to make requests at a slower rate.\n *\n * @param {TokenBucketRateLimitOptions} options - The options for the token\n * bucket rate limiting rule.\n * @param {ArcjetMode} options.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block requests when the rate limit is\n * exceeded, and `\"DRY_RUN\"` will allow all requests while still providing\n * access to the rule results. Defaults to `\"DRY_RUN\"` if not specified.\n * @param {number} options.refillRate - The number of tokens to add to the\n * bucket at each interval. For example, if you set the interval to 60 and the\n * refill rate to 10, the bucket will refill 10 tokens every 60 seconds.\n * @param {string | number} options.interval - The time interval for the refill\n * rate. This can be a string like `\"60s\"` for 60 seconds, `\"1h45m\"` for 1 hour\n * and 45 minutes, or a number like `60` for 60 seconds. Valid string time units\n * are:\n * - `s` for seconds.\n * - `m` for minutes.\n * - `h` for hours.\n * - `d` for days.\n * @param {number} options.capacity - The maximum number of tokens the bucket\n * can hold. The bucket starts at full capacity and will refill until it hits\n * the capacity.\n * @returns {Primitive} The token bucket rule to provide to the SDK in the\n * `rules` option.\n *\n * @example\n * ```ts\n * tokenBucket({ mode: \"LIVE\", refillRate: 10, interval: \"60s\", capacity: 100 });\n * ```\n * @example\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *     tokenBucket({\n *       mode: \"LIVE\",\n *       refillRate: 10,\n *       interval: \"60s\",\n *       capacity: 100,\n *     })\n *   ],\n * });\n * ```\n * @link https://docs.arcjet.com/rate-limiting/concepts\n * @link https://docs.arcjet.com/rate-limiting/algorithms#token-bucket\n * @link https://docs.arcjet.com/rate-limiting/reference\n */\nfunction tokenBucket(options) {\n    validateTokenBucketOptions(options);\n    const type = \"RATE_LIMIT\";\n    const version = 0;\n    const mode = options.mode === \"LIVE\" ? \"LIVE\" : \"DRY_RUN\";\n    const characteristics = Array.isArray(options.characteristics)\n        ? options.characteristics\n        : undefined;\n    const refillRate = options.refillRate;\n    const interval = _arcjet_duration__WEBPACK_IMPORTED_MODULE_3__.parse(options.interval);\n    const capacity = options.capacity;\n    const rule = {\n        type,\n        version,\n        priority: Priority.RateLimit,\n        mode,\n        characteristics,\n        algorithm: \"TOKEN_BUCKET\",\n        refillRate,\n        interval,\n        capacity,\n    };\n    return [rule];\n}\n/**\n * Arcjet fixed window rate limiting rule. Applying this rule sets a fixed\n * window rate limit which tracks the number of requests made by a client over a\n * fixed time window.\n *\n * This is the simplest algorithm. It tracks the number of requests made by a\n * client over a fixed time window e.g. 60 seconds. If the client exceeds the\n * limit, they are blocked until the window expires.\n *\n * This algorithm is useful when you want to apply a simple fixed limit in a\n * fixed time window. For example, a simple limit on the total number of\n * requests a client can make. However, it can be susceptible to the stampede\n * problem where a client makes a burst of requests at the start of a window and\n * then is blocked for the rest of the window. The sliding window algorithm can\n * be used to avoid this.\n *\n * @param {FixedWindowRateLimitOptions} options - The options for the fixed\n * window rate limiting rule.\n * @param {ArcjetMode} options.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block requests when the rate limit is\n * exceeded, and `\"DRY_RUN\"` will allow all requests while still providing\n * access to the rule results. Defaults to `\"DRY_RUN\"` if not specified.\n * @param {string | number} options.window - The fixed time window. This can be\n * a string like `\"60s\"` for 60 seconds, `\"1h45m\"` for 1 hour and 45 minutes, or\n * a number like `60` for 60 seconds. Valid string time units are:\n * - `s` for seconds.\n * - `m` for minutes.\n * - `h` for hours.\n * - `d` for days.\n * @param {number} options.max - The maximum number of requests allowed in the\n * fixed time window.\n * @returns {Primitive} The fixed window rule to provide to the SDK in the\n * `rules` option.\n *\n * @example\n * ```ts\n * fixedWindow({ mode: \"LIVE\", window: \"60s\", max: 100 });\n * ```\n * @example\n * ```ts\n * const aj = arcjet({\n *    key: process.env.ARCJET_KEY,\n *   rules: [\n *     fixedWindow({\n *       mode: \"LIVE\",\n *       window: \"60s\",\n *       max: 100,\n *     })\n *   ],\n * });\n * ```\n * @link https://docs.arcjet.com/rate-limiting/concepts\n * @link https://docs.arcjet.com/rate-limiting/algorithms#fixed-window\n * @link https://docs.arcjet.com/rate-limiting/reference\n */\nfunction fixedWindow(options) {\n    validateFixedWindowOptions(options);\n    const type = \"RATE_LIMIT\";\n    const version = 0;\n    const mode = options.mode === \"LIVE\" ? \"LIVE\" : \"DRY_RUN\";\n    const characteristics = Array.isArray(options.characteristics)\n        ? options.characteristics\n        : undefined;\n    const max = options.max;\n    const window = _arcjet_duration__WEBPACK_IMPORTED_MODULE_3__.parse(options.window);\n    const rule = {\n        type,\n        version,\n        priority: Priority.RateLimit,\n        mode,\n        characteristics,\n        algorithm: \"FIXED_WINDOW\",\n        max,\n        window,\n    };\n    return [rule];\n}\n/**\n * Arcjet sliding window rate limiting rule. Applying this rule sets a sliding\n * window rate limit which tracks the number of requests made by a client over a\n * sliding window so that the window moves with time.\n *\n * This algorithm is useful to avoid the stampede problem of the fixed window.\n * It provides smoother rate limiting over time and can prevent a client from\n * making a burst of requests at the start of a window and then being blocked\n * for the rest of the window.\n *\n * @param {SlidingWindowRateLimitOptions} options - The options for the sliding\n * window rate limiting rule.\n * @param {ArcjetMode} options.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block requests when the rate limit is\n * exceeded, and `\"DRY_RUN\"` will allow all requests while still providing\n * access to the rule results. Defaults to `\"DRY_RUN\"` if not specified.\n * @param {string | number} options.interval - The time interval for the rate\n * limit. This can be a string like `\"60s\"` for 60 seconds, `\"1h45m\"` for 1 hour\n * and 45 minutes, or a number like `60` for 60 seconds. Valid string time units\n * are:\n * - `s` for seconds.\n * - `m` for minutes.\n * - `h` for hours.\n * - `d` for days.\n * @param {number} options.max - The maximum number of requests allowed in the\n * sliding time window.\n * @returns {Primitive} The sliding window rule to provide to the SDK in the\n * `rules` option.\n *\n * @example\n * ```ts\n * slidingWindow({ mode: \"LIVE\", interval: \"60s\", max: 100 });\n * ```\n * @example\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *     slidingWindow({\n *       mode: \"LIVE\",\n *       interval: \"60s\",\n *       max: 100,\n *     })\n *   ],\n * });\n * ```\n * @link https://docs.arcjet.com/rate-limiting/concepts\n * @link https://docs.arcjet.com/rate-limiting/algorithms#sliding-window\n * @link https://docs.arcjet.com/rate-limiting/reference\n */\nfunction slidingWindow(options) {\n    validateSlidingWindowOptions(options);\n    const type = \"RATE_LIMIT\";\n    const version = 0;\n    const mode = options.mode === \"LIVE\" ? \"LIVE\" : \"DRY_RUN\";\n    const characteristics = Array.isArray(options.characteristics)\n        ? options.characteristics\n        : undefined;\n    const max = options.max;\n    const interval = _arcjet_duration__WEBPACK_IMPORTED_MODULE_3__.parse(options.interval);\n    const rule = {\n        type,\n        version,\n        priority: Priority.RateLimit,\n        mode,\n        characteristics,\n        algorithm: \"SLIDING_WINDOW\",\n        max,\n        interval,\n    };\n    return [rule];\n}\nfunction protocolSensitiveInfoEntitiesToAnalyze(entity) {\n    if (typeof entity !== \"string\") {\n        throw new Error(\"invalid entity type\");\n    }\n    if (entity === \"EMAIL\") {\n        return { tag: \"email\" };\n    }\n    if (entity === \"PHONE_NUMBER\") {\n        return { tag: \"phone-number\" };\n    }\n    if (entity === \"IP_ADDRESS\") {\n        return { tag: \"ip-address\" };\n    }\n    if (entity === \"CREDIT_CARD_NUMBER\") {\n        return { tag: \"credit-card-number\" };\n    }\n    return {\n        tag: \"custom\",\n        val: entity,\n    };\n}\nfunction analyzeSensitiveInfoEntitiesToString(entity) {\n    if (entity.tag === \"email\") {\n        return \"EMAIL\";\n    }\n    if (entity.tag === \"ip-address\") {\n        return \"IP_ADDRESS\";\n    }\n    if (entity.tag === \"credit-card-number\") {\n        return \"CREDIT_CARD_NUMBER\";\n    }\n    if (entity.tag === \"phone-number\") {\n        return \"PHONE_NUMBER\";\n    }\n    return entity.val;\n}\nfunction convertAnalyzeDetectedSensitiveInfoEntity(detectedEntities) {\n    return detectedEntities.map((detectedEntity) => {\n        return {\n            ...detectedEntity,\n            identifiedType: analyzeSensitiveInfoEntitiesToString(detectedEntity.identifiedType),\n        };\n    });\n}\n/**\n * Arcjet sensitive information detection rule. Applying this rule protects\n * against clients sending you sensitive information such as personally\n * identifiable information (PII) that you do not wish to handle. The rule runs\n * entirely locally so no data ever leaves your environment.\n *\n * This rule includes built-in detections for email addresses, credit/debit card\n * numbers, IP addresses, and phone numbers. You can also provide a custom\n * detection function to identify additional sensitive information.\n *\n * @param {SensitiveInfoOptions} options - The options for the sensitive\n * information detection rule.\n * @param {ArcjetMode} options.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block requests when any of the\n * configured sensitive information types are detected, and `\"DRY_RUN\"` will\n * allow all requests while still providing access to the rule results. Defaults\n * to `\"DRY_RUN\"` if not specified.\n * @param {Array<ArcjetSensitiveInfoType>} options.deny - The list of sensitive\n * information types to deny. If provided, the sensitive information types in\n * this list will be denied. You may only provide either `allow` or `deny`, not\n * both. Specify one or more of the following:\n *\n * - `\"EMAIL\"`\n * - `\"PHONE_NUMBER\"`\n * - `\"IP_ADDRESS\"`\n * - `\"CREDIT_CARD_NUMBER\"`\n * @param {Array<ArcjetSensitiveInfoType>} options.allow - The list of sensitive\n * information types to allow. If provided, types in this list will be allowed\n * and all others will be denied. You may only provide either `allow` or `deny`,\n * not both. The same options apply as for `deny`.\n * @param {DetectSensitiveInfoEntities} options.detect - A custom detection\n * function. The function will take a list of tokens and must return a list of\n * either `undefined`, if the corresponding token in the input list is not\n * sensitive, or the name of the entity if it does match. The number of tokens\n * that are provided to the function is controlled by the `contextWindowSize`\n * option, which defaults to `1`. If you need additional context to perform\n * detections then you can increase this value.\n * @param {number} options.contextWindowSize - The number of tokens to provide\n * to the custom detection function. This defaults to 1 if not specified.\n * @returns {Primitive} The sensitive information rule to provide to the SDK in\n * the `rules` option.\n *\n * @example\n * ```ts\n * sensitiveInfo({ mode: \"LIVE\", deny: [\"EMAIL\"] });\n * ```\n * @example\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *     sensitiveInfo({\n *       mode: \"LIVE\",\n *       deny: [\"EMAIL\"],\n *     })\n *   ],\n * });\n * ```\n * @example\n * Custom detection function:\n * ```ts\n * function detectDash(tokens: string[]): Array<\"CONTAINS_DASH\" | undefined> {\n *   return tokens.map((token) => {\n *     if (token.includes(\"-\")) {\n *       return \"CONTAINS_DASH\";\n *     }\n *   });\n * }\n *\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *     sensitiveInfo({\n *       mode: \"LIVE\",\n *       deny: [\"EMAIL\", \"CONTAINS_DASH\"],\n *       detect: detectDash,\n *       contextWindowSize: 2,\n *     })\n *   ],\n * });\n * ```\n * @link https://docs.arcjet.com/sensitive-info/concepts\n * @link https://docs.arcjet.com/sensitive-info/reference\n */\nfunction sensitiveInfo(options) {\n    validateSensitiveInfoOptions(options);\n    if (typeof options.allow !== \"undefined\" &&\n        typeof options.deny !== \"undefined\") {\n        throw new Error(\"`sensitiveInfo` options error: `allow` and `deny` cannot be provided together\");\n    }\n    if (typeof options.allow === \"undefined\" &&\n        typeof options.deny === \"undefined\") {\n        throw new Error(\"`sensitiveInfo` options error: either `allow` or `deny` must be specified\");\n    }\n    const type = \"SENSITIVE_INFO\";\n    const version = 0;\n    const mode = options.mode === \"LIVE\" ? \"LIVE\" : \"DRY_RUN\";\n    const allow = options.allow || [];\n    const deny = options.deny || [];\n    const id = _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.hash(_arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.string(\"type\", type), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.uint32(\"version\", version), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.string(\"mode\", mode), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.stringSliceOrdered(\"allow\", allow), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.stringSliceOrdered(\"deny\", deny));\n    const rule = {\n        version,\n        priority: Priority.SensitiveInfo,\n        type,\n        mode,\n        allow,\n        deny,\n        validate(context, details) { },\n        async protect(context, details) {\n            const ruleId = await id;\n            const body = await context.getBody();\n            if (typeof body === \"undefined\") {\n                return new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                    ruleId,\n                    ttl: 0,\n                    state: \"NOT_RUN\",\n                    conclusion: \"ERROR\",\n                    reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorReason(\"Couldn't read the body of the request to perform sensitive info identification.\"),\n                });\n            }\n            let convertedDetect = undefined;\n            if (typeof options.detect !== \"undefined\") {\n                const detect = options.detect;\n                convertedDetect = (tokens) => {\n                    return detect(tokens)\n                        .filter((e) => typeof e !== \"undefined\")\n                        .map(protocolSensitiveInfoEntitiesToAnalyze);\n                };\n            }\n            let entitiesTag = \"allow\";\n            let entitiesVal = [];\n            if (Array.isArray(options.allow)) {\n                entitiesTag = \"allow\";\n                entitiesVal = options.allow\n                    .filter((e) => typeof e !== \"undefined\")\n                    .map(protocolSensitiveInfoEntitiesToAnalyze);\n            }\n            if (Array.isArray(options.deny)) {\n                entitiesTag = \"deny\";\n                entitiesVal = options.deny\n                    .filter((e) => typeof e !== \"undefined\")\n                    .map(protocolSensitiveInfoEntitiesToAnalyze);\n            }\n            const entities = {\n                tag: entitiesTag,\n                val: entitiesVal,\n            };\n            const result = await _arcjet_analyze__WEBPACK_IMPORTED_MODULE_2__.detectSensitiveInfo(context, body, entities, options.contextWindowSize || 1, convertedDetect);\n            const state = mode === \"LIVE\" ? \"RUN\" : \"DRY_RUN\";\n            const reason = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetSensitiveInfoReason({\n                denied: convertAnalyzeDetectedSensitiveInfoEntity(result.denied),\n                allowed: convertAnalyzeDetectedSensitiveInfoEntity(result.allowed),\n            });\n            if (result.denied.length === 0) {\n                return new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                    ruleId,\n                    ttl: 0,\n                    state,\n                    conclusion: \"ALLOW\",\n                    reason,\n                });\n            }\n            else {\n                return new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                    ruleId,\n                    ttl: 0,\n                    state,\n                    conclusion: \"DENY\",\n                    reason,\n                });\n            }\n        },\n    };\n    return [rule];\n}\n/**\n * Arcjet email validation rule. Applying this rule allows you to validate &\n * verify an email address.\n *\n * The first step of the analysis is to validate the email address syntax. This\n * runs locally within the SDK and validates the email address is in the correct\n * format. If the email syntax is valid, the SDK will pass the email address to\n * the Arcjet cloud API to verify the email address. This performs several\n * checks, depending on the rule configuration.\n *\n * @param {EmailOptions} options - The options for the email validation rule.\n * @param {ArcjetMode} options.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block email addresses based on the\n * configuration, and `\"DRY_RUN\"` will allow all requests while still providing\n * access to the rule results. Defaults to `\"DRY_RUN\"` if not specified.\n * @param {Array<ArcjetEmailType>} options.deny - The list of email types to\n * deny. If provided, the email types in this list will be denied. You may only\n * provide either `allow` or `deny`, not both. Specify one or more of the\n * following:\n *\n * - `\"DISPOSABLE\"` - Disposable email addresses.\n * - `\"FREE\"` - Free email addresses.\n * - `\"NO_MX_RECORDS\"` - Email addresses with no MX records.\n * - `\"NO_GRAVATAR\"` - Email addresses with no Gravatar.\n * - `\"INVALID\"` - Invalid email addresses.\n *\n * @param {Array<ArcjetEmailType>} options.allow - The list of email types to\n * allow. If provided, email addresses in this list will be allowed and all\n * others will be denied. You may only provide either `allow` or `deny`, not\n * both. The same options apply as for `deny`.\n * @returns {Primitive} The email rule to provide to the SDK in the `rules`\n * option.\n *\n * @example\n * ```ts\n * validateEmail({ mode: \"LIVE\", deny: [\"DISPOSABLE\", \"INVALID\"] });\n * ```\n * @example\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *     validateEmail({\n *       mode: \"LIVE\",\n *       deny: [\"DISPOSABLE\", \"INVALID\"]\n *     })\n *   ],\n * });\n * ```\n * @link https://docs.arcjet.com/email-validation/concepts\n * @link https://docs.arcjet.com/email-validation/reference\n */\nfunction validateEmail(options) {\n    validateEmailOptions(options);\n    if (typeof options.allow !== \"undefined\" &&\n        typeof options.deny !== \"undefined\") {\n        throw new Error(\"`validateEmail` options error: `allow` and `deny` cannot be provided together\");\n    }\n    if (typeof options.allow !== \"undefined\" &&\n        typeof options.block !== \"undefined\") {\n        throw new Error(\"`validateEmail` options error: `allow` and `block` cannot be provided together\");\n    }\n    if (typeof options.deny !== \"undefined\" &&\n        typeof options.block !== \"undefined\") {\n        throw new Error(\"`validateEmail` options error: `deny` and `block` cannot be provided together, `block` is now deprecated so `deny` should be preferred.\");\n    }\n    if (typeof options.allow === \"undefined\" &&\n        typeof options.deny === \"undefined\" &&\n        typeof options.block === \"undefined\") {\n        throw new Error(\"`validateEmail` options error: either `allow` or `deny` must be specified\");\n    }\n    const type = \"EMAIL\";\n    const version = 0;\n    const mode = options.mode === \"LIVE\" ? \"LIVE\" : \"DRY_RUN\";\n    const allow = options.allow ?? [];\n    const deny = options.deny ?? options.block ?? [];\n    const requireTopLevelDomain = options.requireTopLevelDomain ?? true;\n    const allowDomainLiteral = options.allowDomainLiteral ?? false;\n    const id = _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.hash(_arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.string(\"type\", type), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.uint32(\"version\", version), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.string(\"mode\", mode), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.stringSliceOrdered(\"allow\", allow), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.stringSliceOrdered(\"deny\", deny), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.bool(\"requireTopLevelDomain\", requireTopLevelDomain), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.bool(\"allowDomainLiteral\", allowDomainLiteral));\n    let config = {\n        tag: \"deny-email-validation-config\",\n        val: {\n            requireTopLevelDomain,\n            allowDomainLiteral,\n            deny: [],\n        },\n    };\n    if (typeof options.allow !== \"undefined\") {\n        config = {\n            tag: \"allow-email-validation-config\",\n            val: {\n                requireTopLevelDomain,\n                allowDomainLiteral,\n                allow: options.allow,\n            },\n        };\n    }\n    if (typeof options.deny !== \"undefined\") {\n        config = {\n            tag: \"deny-email-validation-config\",\n            val: {\n                requireTopLevelDomain,\n                allowDomainLiteral,\n                deny: options.deny,\n            },\n        };\n    }\n    if (typeof options.block !== \"undefined\") {\n        config = {\n            tag: \"deny-email-validation-config\",\n            val: {\n                requireTopLevelDomain,\n                allowDomainLiteral,\n                deny: options.block,\n            },\n        };\n    }\n    const rule = {\n        version,\n        priority: Priority.EmailValidation,\n        type,\n        mode,\n        allow,\n        deny,\n        requireTopLevelDomain,\n        allowDomainLiteral,\n        validate(context, details) {\n            assert(typeof details.email !== \"undefined\", \"ValidateEmail requires `email` to be set.\");\n        },\n        async protect(context, { email }) {\n            const ruleId = await id;\n            const result = await _arcjet_analyze__WEBPACK_IMPORTED_MODULE_2__.isValidEmail(context, email, config);\n            const state = mode === \"LIVE\" ? \"RUN\" : \"DRY_RUN\";\n            if (result.validity === \"valid\") {\n                return new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                    ruleId,\n                    ttl: 0,\n                    state,\n                    conclusion: \"ALLOW\",\n                    reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetEmailReason({ emailTypes: [] }),\n                });\n            }\n            else {\n                const typedEmailTypes = result.blocked.filter(isEmailType);\n                return new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                    ruleId,\n                    ttl: 0,\n                    state,\n                    conclusion: \"DENY\",\n                    reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetEmailReason({\n                        emailTypes: typedEmailTypes,\n                    }),\n                });\n            }\n        },\n    };\n    return [rule];\n}\n/**\n * Arcjet bot detection rule. Applying this rule allows you to manage traffic by\n * automated clients and bots.\n *\n * Bots can be good (such as search engine crawlers or monitoring agents) or bad\n * (such as scrapers or automated scripts). Arcjet allows you to configure which\n * bots you want to allow or deny by specific bot names e.g. curl, as well as by\n * category e.g. search engine bots.\n *\n * Bots are detected based on various signals such as the user agent, IP\n * address, DNS records, and more.\n *\n * @param {BotOptions} options - The options for the bot rule.\n * @param {ArcjetMode} options.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block detected bots, and `\"DRY_RUN\"`\n * will allow all requests while still providing access to the rule results.\n * Defaults to `\"DRY_RUN\"` if not specified.\n * @param {Array<ArcjetWellKnownBot | ArcjetBotCategory>} options.allow - The\n * list of bots to allow. If provided, only the bots in this list will be\n * allowed and any other detected bot will be denied. If empty, all bots will be\n * denied. You may only provide either `allow` or `deny`, not both. You can use\n * specific bots e.g. `\"CURL\"` will allow the default user-agent of the `curl`\n * tool. You can also use categories e.g. `\"CATEGORY:SEARCH_ENGINE\"` will allow\n * all search engine bots. See\n * https://docs.arcjet.com/bot-protection/identifying-bots for the full list of\n * bots and categories.\n * @param {Array<ArcjetWellKnownBot | ArcjetBotCategory>} options.deny - The\n * list of bots to deny. If provided, the bots in this list will be denied and\n * all other detected bots will be allowed. You may only provide either `allow`\n * or `deny`, not both. The same options apply as for `allow`.\n * @returns {Primitive} The bot rule to provide to the SDK in the `rules`\n * option.\n *\n * @example\n * Allows search engine bots and curl, denies all other bots\n *\n * ```ts\n * detectBot({ mode: \"LIVE\", allow: [\"CATEGORY:SEARCH_ENGINE\", \"CURL\"] });\n * ```\n * @example\n * Allows search engine bots and curl, denies all other bots\n *\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *     detectBot({\n *       mode: \"LIVE\",\n *       allow: [\"CATEGORY:SEARCH_ENGINE\", \"CURL\"]\n *     })\n *   ],\n * });\n * ```\n * @example\n * Denies AI crawlers, allows all other bots\n *\n * ```ts\n * detectBot({ mode: \"LIVE\", deny: [\"CATEGORY:AI\"] });\n * ```\n * @example\n * Denies AI crawlers, allows all other bots\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *     detectBot({\n *       mode: \"LIVE\",\n *       deny: [\"CATEGORY:AI\"]\n *     })\n *   ],\n * });\n * ```\n * @link https://docs.arcjet.com/bot-protection/concepts\n * @link https://docs.arcjet.com/bot-protection/identifying-bots\n * @link https://docs.arcjet.com/bot-protection/reference\n */\nfunction detectBot(options) {\n    validateBotOptions(options);\n    if (typeof options.allow !== \"undefined\" &&\n        typeof options.deny !== \"undefined\") {\n        throw new Error(\"`detectBot` options error: `allow` and `deny` cannot be provided together\");\n    }\n    if (typeof options.allow === \"undefined\" &&\n        typeof options.deny === \"undefined\") {\n        throw new Error(\"`detectBot` options error: either `allow` or `deny` must be specified\");\n    }\n    const type = \"BOT\";\n    const version = 0;\n    const mode = options.mode === \"LIVE\" ? \"LIVE\" : \"DRY_RUN\";\n    const allow = options.allow ?? [];\n    const deny = options.deny ?? [];\n    const id = _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.hash(_arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.string(\"type\", type), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.uint32(\"version\", version), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.string(\"mode\", mode), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.stringSliceOrdered(\"allow\", allow), _arcjet_stable_hash__WEBPACK_IMPORTED_MODULE_6__.stringSliceOrdered(\"deny\", deny));\n    let config = {\n        tag: \"allowed-bot-config\",\n        val: {\n            entities: [],\n            skipCustomDetect: true,\n        },\n    };\n    if (typeof options.allow !== \"undefined\") {\n        config = {\n            tag: \"allowed-bot-config\",\n            val: {\n                entities: options.allow,\n                skipCustomDetect: true,\n            },\n        };\n    }\n    if (typeof options.deny !== \"undefined\") {\n        config = {\n            tag: \"denied-bot-config\",\n            val: {\n                entities: options.deny,\n                skipCustomDetect: true,\n            },\n        };\n    }\n    const rule = {\n        version,\n        priority: Priority.BotDetection,\n        type,\n        mode,\n        allow,\n        deny,\n        validate(context, details) {\n            if (typeof details.headers === \"undefined\") {\n                throw new Error(\"bot detection requires `headers` to be set\");\n            }\n            if (typeof details.headers.has !== \"function\") {\n                throw new Error(\"bot detection requires `headers` to extend `Headers`\");\n            }\n            if (!details.headers.has(\"user-agent\")) {\n                throw new Error(\"bot detection requires user-agent header\");\n            }\n        },\n        /**\n         * Attempts to call the bot detection on the headers.\n         */\n        async protect(context, request) {\n            const ruleId = await id;\n            const result = await _arcjet_analyze__WEBPACK_IMPORTED_MODULE_2__.detectBot(context, toAnalyzeRequest(request), config);\n            const state = mode === \"LIVE\" ? \"RUN\" : \"DRY_RUN\";\n            // If this is a bot and of a type that we want to block, then block!\n            if (result.denied.length > 0) {\n                return new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                    ruleId,\n                    ttl: 60,\n                    state,\n                    conclusion: \"DENY\",\n                    reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetBotReason({\n                        allowed: result.allowed,\n                        denied: result.denied,\n                        verified: result.verified,\n                        spoofed: result.spoofed,\n                    }),\n                });\n            }\n            else {\n                return new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                    ruleId,\n                    ttl: 0,\n                    state,\n                    conclusion: \"ALLOW\",\n                    reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetBotReason({\n                        allowed: result.allowed,\n                        denied: result.denied,\n                        verified: result.verified,\n                        spoofed: result.spoofed,\n                    }),\n                });\n            }\n        },\n    };\n    return [rule];\n}\n/**\n * Arcjet Shield WAF rule. Applying this rule protects your application against\n * common attacks, including the OWASP Top 10.\n *\n * The Arcjet Shield WAF analyzes every request to your application to detect\n * suspicious activity. Once a certain suspicion threshold is reached,\n * subsequent requests from that client are blocked for a period of time.\n *\n * @param {ShieldOptions} options - The options for the Shield rule.\n * @param {ArcjetMode} options.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block suspicious requests, and\n * `\"DRY_RUN\"` will allow all requests while still providing access to the rule\n * results. Defaults to `\"DRY_RUN\"` if not specified.\n * @returns {Primitive} The Shield rule to provide to the SDK in the `rules`\n * option.\n *\n * @example\n * ```ts\n * shield({ mode: \"LIVE\" });\n * ```\n * @example\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [shield({ mode: \"LIVE\" })],\n * });\n * ```\n * @link https://docs.arcjet.com/shield/concepts\n * @link https://docs.arcjet.com/shield/reference\n */\nfunction shield(options) {\n    validateShieldOptions(options);\n    const type = \"SHIELD\";\n    const version = 0;\n    const mode = options.mode === \"LIVE\" ? \"LIVE\" : \"DRY_RUN\";\n    const rule = {\n        type,\n        version,\n        priority: Priority.Shield,\n        mode,\n    };\n    return [rule];\n}\n/**\n * Arcjet signup form protection rule. Applying this rule combines rate\n * limiting, bot protection, and email validation to protect your signup forms\n * from abuse. Using this rule will configure the following:\n *\n * - Rate limiting - signup forms are a common target for bots. Arcjet’s rate\n *   limiting helps to prevent bots and other automated or malicious clients\n *   from submitting your signup form too many times in a short period of time.\n * - Bot protection - signup forms are usually exclusively used by humans, which\n *   means that any automated submissions to the form are likely to be\n *   fraudulent.\n * - Email validation - email addresses should be validated to ensure the signup\n *   is coming from a legitimate user with a real email address that can\n *   actually receive messages.\n *\n * @param {ProtectSignupOptions} options - The options for the signup form\n * protection rule.\n * @param {ArcjetMode} options.email.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block email addresses based on the\n * configuration, and `\"DRY_RUN\"` will allow all requests while still providing\n * access to the rule results. Defaults to `\"DRY_RUN\"` if not specified.\n * @param {Array<ArcjetEmailType>} options.email.deny - The list of email types\n * to deny. If provided, the email types in this list will be denied. You may\n * only provide either `allow` or `deny`, not both. Specify one or more of the\n * following:\n *\n * - `\"DISPOSABLE\"` - Disposable email addresses.\n * - `\"FREE\"` - Free email addresses.\n * - `\"NO_MX_RECORDS\"` - Email addresses with no MX records.\n * - `\"NO_GRAVATAR\"` - Email addresses with no Gravatar.\n * - `\"INVALID\"` - Invalid email addresses.\n *\n * @param {Array<ArcjetEmailType>} options.email.allow - The list of email types\n * to allow. If provided, email addresses in this list will be allowed and all\n * others will be denied. You may only provide either `allow` or `deny`, not\n * both. The same options apply as for `deny`.\n * @param {ArcjetMode} options.bots.mode - The block mode of the rule, either\n * `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block detected bots, and `\"DRY_RUN\"`\n * will allow all requests while still providing access to the rule results.\n * Defaults to `\"DRY_RUN\"` if not specified.\n * @param {Array<ArcjetWellKnownBot | ArcjetBotCategory>} options.bots.allow -\n * The list of bots to allow. If provided, only the bots in this list will be\n * allowed and any other detected bot will be denied. If empty, all bots will be\n * denied. You may only provide either `allow` or `deny`, not both. You can use\n * specific bots e.g. `\"CURL\"` will allow the default user-agent of the `curl`\n * tool. You can also use categories e.g. `\"CATEGORY:SEARCH_ENGINE\"` will allow\n * all search engine bots. See\n * https://docs.arcjet.com/bot-protection/identifying-bots for the full list of\n * bots and categories.\n * @param {Array<ArcjetWellKnownBot | ArcjetBotCategory>} options.bots.deny -\n * The list of bots to deny. If provided, the bots in this list will be denied\n * and all other detected bots will be allowed. You may only provide either\n * `allow` or `deny`, not both. The same options apply as for `allow`.\n * @param {SlidingWindowRateLimitOptions} options.rateLimit - The options for\n * the sliding window rate limiting rule.\n * @param {ArcjetMode} options.rateLimit.mode - The block mode of the rule,\n * either `\"LIVE\"` or `\"DRY_RUN\"`. `\"LIVE\"` will block requests when the rate\n * limit is exceeded, and `\"DRY_RUN\"` will allow all requests while still\n * providing access to the rule results. Defaults to `\"DRY_RUN\"` if not\n * specified.\n * @param {string | number} options.rateLimit.interval - The time interval for\n * the rate limit. This can be a string like `\"60s\"` for 60 seconds, `\"1h45m\"`\n * for 1 hour and 45 minutes, or a number like `60` for 60 seconds. Valid string\n * time units are:\n * - `s` for seconds.\n * - `m` for minutes.\n * - `h` for hours.\n * - `d` for days.\n * @param {number} options.rateLimit.max - The maximum number of requests\n * allowed in the sliding time window.\n * @returns {Primitive} The signup form protection rule to provide to the SDK in\n * the `rules` option.\n *\n * @example\n * Our recommended configuration for most signup forms is:\n *\n * - Block emails with invalid syntax, that are from disposable email providers,\n *   or do not have valid MX records configured.\n * - Block all bots.\n * - Apply a rate limit of 5 submissions per 10 minutes from a single IP\n *   address.\n *\n * ```ts\n * const aj = arcjet({\n *   key: process.env.ARCJET_KEY,\n *   rules: [\n *    protectSignup({\n *      email: {\n *        mode: \"LIVE\",\n *        block: [\"DISPOSABLE\", \"INVALID\", \"NO_MX_RECORDS\"],\n *      },\n *      bots: {\n *        mode: \"LIVE\",\n *        allow: [], // block all detected bots\n *      },\n *      rateLimit: {\n *        mode: \"LIVE\",\n *        interval: \"10m\",\n *        max: 5,\n *      },\n *    }),\n *  ],\n * });\n * ```\n * @link https://docs.arcjet.com/signup-protection/concepts\n * @link https://docs.arcjet.com/signup-protection/reference\n */\nfunction protectSignup(options) {\n    return [\n        ...slidingWindow(options.rateLimit),\n        ...detectBot(options.bots),\n        ...validateEmail(options.email),\n    ];\n}\n/**\n * Create a new Arcjet client with the specified {@link ArcjetOptions}.\n *\n * @param options {ArcjetOptions} Arcjet configuration options.\n */\nfunction arcjet(options) {\n    // We destructure here to make the function signature neat when viewed by consumers\n    const { key, rules } = options;\n    const rt = (0,_arcjet_runtime__WEBPACK_IMPORTED_MODULE_5__.runtime)();\n    // TODO: Separate the ArcjetOptions from the SDK Options\n    // It is currently optional in the options so users can override it via an SDK\n    if (typeof options.log === \"undefined\") {\n        throw new Error(\"Log is required\");\n    }\n    const log = options.log;\n    const perf = new Performance(log);\n    // TODO(#207): Remove this when we can default the transport so client is not required\n    // It is currently optional in the options so the Next SDK can override it for the user\n    if (typeof options.client === \"undefined\") {\n        throw new Error(\"Client is required\");\n    }\n    const client = options.client;\n    // A local cache of block decisions. Might be emphemeral per request,\n    // depending on the way the runtime works, but it's worth a try.\n    // TODO(#132): Support configurable caching\n    const blockCache = new Cache();\n    const rootRules = rules\n        .flat(1)\n        .sort((a, b) => a.priority - b.priority);\n    async function protect(rules, ctx, request) {\n        // This goes against the type definition above, but users might call\n        // `protect()` with no value and we don't want to crash\n        if (typeof request === \"undefined\") {\n            request = {};\n        }\n        const details = Object.freeze({\n            ip: request.ip,\n            method: request.method,\n            protocol: request.protocol,\n            host: request.host,\n            path: request.path,\n            headers: new _arcjet_headers__WEBPACK_IMPORTED_MODULE_4__[\"default\"](request.headers),\n            cookies: request.cookies,\n            query: request.query,\n            // TODO(#208): Re-add body\n            // body: request.body,\n            extra: extraProps(request),\n            email: typeof request.email === \"string\" ? request.email : undefined,\n        });\n        const characteristics = options.characteristics\n            ? [...options.characteristics]\n            : [];\n        const waitUntil = lookupWaitUntil();\n        const baseContext = {\n            key,\n            log,\n            characteristics,\n            waitUntil,\n            ...ctx,\n        };\n        let fingerprint = \"\";\n        const logFingerprintPerf = perf.measure(\"fingerprint\");\n        try {\n            fingerprint = await _arcjet_analyze__WEBPACK_IMPORTED_MODULE_2__.generateFingerprint(baseContext, toAnalyzeRequest(details));\n            log.debug(\"fingerprint (%s): %s\", rt, fingerprint);\n        }\n        catch (error) {\n            log.error({ error }, \"Failed to build fingerprint. Please verify your Characteristics.\");\n            const decision = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorDecision({\n                ttl: 0,\n                reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorReason(`Failed to build fingerprint - ${errorMessage(error)}`),\n                // No results because we couldn't create a fingerprint\n                results: [],\n            });\n            // TODO: Consider sending this to Report when we have an infallible fingerprint\n            return decision;\n        }\n        finally {\n            logFingerprintPerf();\n        }\n        const context = Object.freeze({\n            ...baseContext,\n            fingerprint,\n            runtime: rt,\n        });\n        if (rules.length < 1) {\n            log.warn(\"Calling `protect()` with no rules is deprecated. Did you mean to configure the Shield rule?\");\n        }\n        if (rules.length > 10) {\n            log.error(\"Failure running rules. Only 10 rules may be specified.\");\n            const decision = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorDecision({\n                ttl: 0,\n                reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorReason(\"Only 10 rules may be specified\"),\n                // No results because the sorted rules were too long and we don't want\n                // to instantiate a ton of NOT_RUN results\n                results: [],\n            });\n            client.report(context, details, decision, \n            // No rules because we've determined they were too long and we don't\n            // want to try to send them to the server\n            []);\n            return decision;\n        }\n        const results = [];\n        for (let idx = 0; idx < rules.length; idx++) {\n            // Default all rules to NOT_RUN/ALLOW before doing anything\n            results[idx] = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                // TODO(#4030): Figure out if we can get each Rule ID before they are run\n                ruleId: \"\",\n                ttl: 0,\n                state: \"NOT_RUN\",\n                conclusion: \"ALLOW\",\n                reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetReason(),\n            });\n            // Add top-level characteristics to all Rate Limit rules that don't already have\n            // their own set of characteristics.\n            const candidate_rule = rules[idx];\n            if ((0,_arcjet_protocol_convert_js__WEBPACK_IMPORTED_MODULE_1__.isRateLimitRule)(candidate_rule)) {\n                if (typeof candidate_rule.characteristics === \"undefined\") {\n                    candidate_rule.characteristics = characteristics;\n                    rules[idx] = candidate_rule;\n                }\n            }\n        }\n        const logLocalPerf = perf.measure(\"local\");\n        try {\n            // We have our own local cache which we check first. This doesn't work in\n            // serverless environments where every request is isolated, but there may be\n            // some instances where the instance is not recycled immediately. If so, we\n            // can take advantage of that.\n            const logCachePerf = perf.measure(\"cache\");\n            const existingBlockReason = blockCache.get(fingerprint);\n            logCachePerf();\n            // If already blocked then we can async log to the API and return the\n            // decision immediately.\n            if (existingBlockReason) {\n                const decision = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetDenyDecision({\n                    ttl: blockCache.ttl(fingerprint),\n                    reason: existingBlockReason,\n                    // All results will be NOT_RUN because we used a cached decision\n                    results,\n                });\n                client.report(context, details, decision, rules);\n                log.debug({\n                    id: decision.id,\n                    conclusion: decision.conclusion,\n                    fingerprint,\n                    reason: existingBlockReason,\n                    runtime: rt,\n                }, \"decide: already blocked\");\n                return decision;\n            }\n            for (const [idx, rule] of rules.entries()) {\n                // This re-assignment is a workaround to a TypeScript error with\n                // assertions where the name was introduced via a destructure\n                let localRule;\n                if (isLocalRule(rule)) {\n                    localRule = rule;\n                }\n                else {\n                    continue;\n                }\n                const logRulePerf = perf.measure(rule.type);\n                try {\n                    localRule.validate(context, details);\n                    results[idx] = await localRule.protect(context, details);\n                    // If a rule didn't return a rule result, we need to stub it to avoid\n                    // crashing. This should only happen if a user writes a custom local\n                    // rule incorrectly.\n                    if (typeof results[idx] === \"undefined\") {\n                        results[idx] = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                            // TODO(#4030): If we can get the Rule ID before running rules,\n                            // this can use it\n                            ruleId: \"\",\n                            ttl: 0,\n                            state: \"RUN\",\n                            conclusion: \"ERROR\",\n                            reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorReason(\"rule result missing\"),\n                        });\n                    }\n                    log.debug({\n                        id: results[idx].ruleId,\n                        rule: rule.type,\n                        fingerprint,\n                        path: details.path,\n                        runtime: rt,\n                        ttl: results[idx].ttl,\n                        conclusion: results[idx].conclusion,\n                        reason: results[idx].reason,\n                    }, \"Local rule result:\");\n                }\n                catch (err) {\n                    log.error(\"Failure running rule: %s due to %s\", rule.type, errorMessage(err));\n                    results[idx] = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetRuleResult({\n                        // TODO(#4030): Figure out if we can get a Rule ID in this error case\n                        ruleId: \"\",\n                        ttl: 0,\n                        state: \"RUN\",\n                        conclusion: \"ERROR\",\n                        reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorReason(err),\n                    });\n                }\n                finally {\n                    logRulePerf();\n                }\n                if (results[idx].isDenied()) {\n                    // If the rule is not a DRY_RUN, we want to cache non-zero TTL results\n                    // and return a DENY decision.\n                    if (results[idx].state !== \"DRY_RUN\") {\n                        const decision = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetDenyDecision({\n                            ttl: results[idx].ttl,\n                            reason: results[idx].reason,\n                            results,\n                        });\n                        // Only a DENY decision is reported to avoid creating 2 entries for\n                        // a request. Upon ALLOW, the `decide` call will create an entry for\n                        // the request.\n                        client.report(context, details, decision, rules);\n                        if (results[idx].ttl > 0) {\n                            log.debug({\n                                fingerprint,\n                                conclusion: decision.conclusion,\n                                reason: decision.reason,\n                            }, \"Caching decision for %d seconds\", decision.ttl);\n                            blockCache.set(fingerprint, decision.reason, nowInSeconds() + decision.ttl);\n                        }\n                        return decision;\n                    }\n                    log.warn(`Dry run mode is enabled for \"%s\" rule. Overriding decision. Decision was: DENY`, rule.type);\n                }\n            }\n        }\n        finally {\n            logLocalPerf();\n        }\n        // With no cached values, we take a decision remotely. We use a timeout to\n        // fail open.\n        const logRemotePerf = perf.measure(\"remote\");\n        try {\n            const logDediceApiPerf = perf.measure(\"decideApi\");\n            const decision = await client\n                .decide(context, details, rules)\n                .finally(() => {\n                logDediceApiPerf();\n            });\n            // If the decision is to block and we have a non-zero TTL, we cache the\n            // block locally\n            if (decision.isDenied() && decision.ttl > 0) {\n                log.debug(\"decide: Caching block locally for %d seconds\", decision.ttl);\n                blockCache.set(fingerprint, decision.reason, nowInSeconds() + decision.ttl);\n            }\n            return decision;\n        }\n        catch (err) {\n            log.error(\"Encountered problem getting remote decision: %s\", errorMessage(err));\n            const decision = new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorDecision({\n                ttl: 0,\n                reason: new _arcjet_protocol__WEBPACK_IMPORTED_MODULE_0__.ArcjetErrorReason(err),\n                results,\n            });\n            client.report(context, details, decision, rules);\n            return decision;\n        }\n        finally {\n            logRemotePerf();\n        }\n    }\n    // This is a separate function so it can be called recursively\n    function withRule(baseRules, rule) {\n        const rules = [...baseRules, ...rule].sort((a, b) => a.priority - b.priority);\n        return Object.freeze({\n            withRule(rule) {\n                return withRule(rules, rule);\n            },\n            async protect(ctx, request) {\n                return protect(rules, ctx, request);\n            },\n        });\n    }\n    return Object.freeze({\n        withRule(rule) {\n            return withRule(rootRules, rule);\n        },\n        async protect(ctx, request) {\n            return protect(rootRules, ctx, request);\n        },\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/arcjet/index.js\n");

/***/ })

};
;